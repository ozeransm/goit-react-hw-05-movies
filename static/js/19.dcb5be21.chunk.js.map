{"version":3,"file":"static/js/19.dcb5be21.chunk.js","mappings":"kLAEMA,EAAU,mCACVC,EAAW,gCAEJC,EAAU,eAACC,EAAD,uDAAU,GAAGC,EAAb,uDAAmB,GAAnB,OACnBC,EAAAA,EAAAA,IAAA,UAAaJ,GAAb,OAAwBE,EAAxB,oBAA4CH,GAA5C,OAA8D,KAARI,EAAaA,EAAb,iBAA+BA,IADlE,C,4HCuCvB,EAvCa,WACT,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACMC,GAAOC,EAAAA,EAAAA,cAAY,WACrB,KACIV,EAAAA,EAAAA,GAAQ,SAAD,OAAUI,EAAV,aAA6BO,MAAK,YAAW,IAATF,EAAQ,EAARA,KAEvCD,EAASC,EACZ,GAGJ,CAFA,MAAMG,GACHC,QAAQC,IAAIF,EACf,CAEJ,GAAC,CAACR,IAMH,OAJAW,EAAAA,EAAAA,YAAU,WACNN,GACF,GAAC,CAACA,KAGA,kCACK,OAACF,QAAD,IAACA,GAAAA,EAAOS,KAAKC,UAAU,uCACxB,+BAEIV,QAFJ,IAEIA,OAFJ,EAEIA,EAAOS,KAAKE,KAAI,gBAAEC,EAAF,EAAEA,UAAWC,EAAb,EAAaA,KAAMC,EAAnB,EAAmBA,aAAnB,EAAiCC,GAAjC,OACZ,2BACI,gBAAKC,IAAOF,EAAD,yCAAyDA,GAAzCG,EAAyDC,IAAKL,EAAMM,MAAM,SACrG,uBAAIN,GAAQ,aACZ,uBAAID,GAAa,mBCdrB,eAACQ,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAACT,EAAIU,GAWvD,OAREV,IAFFU,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDWSG,GADG,QAc/B,C","sources":["components/Api.js","components/Cast.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '057e36269a3ddafbb398756699f3ba82';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const GetData = (endpoint='',query='')=>\n    axios.get(`${BASE_URL}${endpoint}?api_key=${API_KEY}${query==='' ? query : `&query=${query}`}`);\n\n\n","import { useCallback, useEffect, useState } from \"react\";\nimport { GetData } from \"components/Api\";\nimport { useParams } from \"react-router-dom\";\nimport noImg from \"../img/no-image.jpg\";\nimport { nanoid } from 'nanoid';\nconst Cast = ()=>{\n    const { movieId } = useParams();\n    const [state, setState] = useState();\n    const data = useCallback(()=>{\n        try{\n            GetData(`movie/${movieId}/credits`).then(({data})=>{\n                // console.log(data)\n                setState(data);\n            })\n        }catch(error){\n            console.log(error);\n        }\n        \n    },[movieId]);\n\n    useEffect(()=>{\n        data();\n     },[data])\n    \n    return(\n        <>\n            {!state?.cast.length && <h3>no result</h3>}\n            <ul>\n            {\n                state?.cast.map(({character, name, profile_path, id})=>\n                    <li key={nanoid()}>\n                        <img src={ !profile_path ? noImg :`https://image.tmdb.org/t/p/w500${profile_path}`} alt={name} width=\"200\"/>\n                        <p>{name || 'no name'}</p>\n                        <p>{character || 'no character'}</p>\n                        </li>)\n                \n            }\n\n            </ul>\n        </>\n        \n\n    )\n}\nexport default Cast;","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["API_KEY","BASE_URL","GetData","endpoint","query","axios","movieId","useParams","useState","state","setState","data","useCallback","then","error","console","log","useEffect","cast","length","map","character","name","profile_path","id","src","noImg","alt","width","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}